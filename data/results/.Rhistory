result = cbind(actual,1,iter)
accuracies = rbind(accuracies,1)
} else {
result = cbind(actual,0,iter)
accuracies = rbind(accuracies,1)
}
}
}
accuracies
head(accuracies)
result
accuracies = c()
for (iter in iters){
# Read in each of the input files
cat(iter,"\n")
pd = parse_single_input(read.csv(paste(iter,"_pearson_cca.tsv",sep=""),sep="\t",row.names=1))
# Subset to threshold and direction
pd = pd[pd$thresh==threshold,]
pd = pd[pd$direction==direction,]
for (actual in queryimages){
sub = pd[which(pd$queryimage==actual),]
sub2 = sub[with(sub, order(-score)), ]
predicted = sub2$comparisonimage[1]
if (predicted==actual){
result = cbind(actual,1,iter)
accuracies = rbind(accuracies,result)
} else {
result = cbind(actual,0,iter)
accuracies = rbind(accuracies,result)
}
}
}
head(accuracies)
df = as.data.frame(accuracies,stringsAsFactors=FALSE)
colnames(df) = c("contrast","classification","iteration")
head(df)
image
sub = df[df$contrast==image,]
sub
dim(sub)
accuracy_mean = mean(sub$classification)
sub$classification
accuracy_mean = mean(as.numeric(sub$classification))
accuracy_mean
unique(sub$classification)
accuracy_mean = mean(as.numeric(sub$classification))
accuracy_sd = std(as.numeric(sub$classification))
accuracy_sd = sd(as.numeric(sub$classification))
result = cbind(image,accuracy_mean,accuracy_sd)
result
tableone = c()
for (image in queryimages){
sub = df[df$contrast==image,]
accuracy_mean = mean(as.numeric(sub$classification))
accuracy_sd = sd(as.numeric(sub$classification))
result = cbind(image,accuracy_mean,accuracy_sd)
tableone = rbind(tableone,result)
}
tableone
accuracy_table = function(threshold=1.0,direction="posneg",label="cca.pearson",queryimages)
https://www.a9.com/whatwedo/visual-search/
accuracy_table=tableone
save(tableone,file="confmatrix_pd_posneg_1_table1.Rda")
write.table(tableone)
write.table(tableone,sep="\t")
write.table(tableone,sep="\t",row.names=FALSE)
write.table(tableone,sep="\t",row.names=FALSE,quote=FALSE)
image = "TASK02_CON27"
image
sub = df[df$contrast==image,]
sub
direction
direction="posneg"
accuracies = c()
for (iter in iters){
# Read in each of the input files
cat(iter,"\n")
pd = parse_single_input(read.csv(paste(iter,"_pearson_cca.tsv",sep=""),sep="\t",row.names=1))
# Subset to threshold and direction
pd = pd[pd$thresh==threshold,]
pd = pd[pd$direction==direction,]
for (actual in queryimages){
sub = pd[which(pd$queryimage==actual),]
sub2 = sub[with(sub, order(-score)), ]
predicted = sub2$comparisonimage[1]
if (predicted==actual){
result = cbind(actual,1,iter)
accuracies = rbind(accuracies,result)
} else {
result = cbind(actual,0,iter)
accuracies = rbind(accuracies,result)
}
}
}
df = as.data.frame(accuracies,stringsAsFactors=FALSE)
colnames(df) = c("contrast","classification","iteration")
# Now we need a mean accuracy and standard deviation for each contrast, across iterations
tableone = c()
for (image in queryimages){
sub = df[df$contrast==image,]
accuracy_mean = mean(as.numeric(sub$classification))
accuracy_sd = sd(as.numeric(sub$classification))
result = cbind(image,accuracy_mean,accuracy_sd)
tableone = rbind(tableone,result)
}
accuracy_table=tableone
save(tableone,file="confmatrix_pd_posneg_1_table1.Rda")
write.table(tableone,sep="\t",row.names=FALSE,quote=FALSE)
getwd()
setwd("/home/vanessa/Documents/Dropbox/Code/R/PACKAGES")
list.files()
setwd("CogatSimilar")
CAID1="cnt_4e00ccaa100fd"
CAID2="cnt_4e02624559a17"
library(rjson)
install.packages("rjson")
library(rjson)
method="Wang"
weight.isa = 0.8
weight.partof = 0.6
if (CAID1 == CAID2){
return (sim=1)
}
sv.a = 1
sv.b = 1
sw = 1
names(sv.a) = CAID1
names(sv.b) = CAID2
Parents = list()
query = readLines(paste('http://cognitiveatlas.org/api/v-alpha/concepts_by_contrast/',CAID,sep=""),warn=FALSE);
CAID=CAID1
query = readLines(paste('http://cognitiveatlas.org/api/v-alpha/concepts_by_contrast/',CAID,sep=""),warn=FALSE);
concepts = fromJSON(query)
concepts
(length(concepts)!=0)
cat("CONCEPTS:",concepts,sep="\n")
names(concepts) = rep("base",length(concepts))
concepts
concepts.caid1 = getAssociatedConcepts(CAID1)
getAssociatedConcepts = function(CAID){
query = readLines(paste('http://cognitiveatlas.org/api/v-alpha/concepts_by_contrast/',CAID,sep=""),warn=FALSE);
concepts = fromJSON(query)
if (length(concepts)!=0){
cat("CONCEPTS:",concepts,sep="\n")
# The names label == parent
names(concepts) = rep("base",length(concepts))
return(concepts)
} else {
return(NA)
}
}
concepts.caid1 = getAssociatedConcepts(CAID1)
concepts.caid2 = getAssociatedConcepts(CAID2)
if (is.na(concepts.caid1[1])) {
returnZero = TRUE
cat("WARNING:",CAID1,"does not have associated concepts.\n")
}
if (is.na(concepts.caid2[1])) {
returnZero = TRUE
cat("WARNING:",CAID2,"does not have associated concepts.\n")
}
concepts = getAssociatedConcepts(CAID)
base=concepts
base
queue = base
concepts = c()
(length(queue) > 0)
current = queue[1]
queue = queue[-1]
tmp = getRelatedConcepts(current)
CONID=current
hasParents = FALSE
hasPartOf = FALSE
query = readLines(paste("http://cognitiveatlas.org/api/v-alpha/relationships_by_concept/",current,sep=""),warn=FALSE);
query
current
paste("http://cognitiveatlas.org/api/v-alpha/relationships_by_concept/",current,sep="")
(length(query)>0)
queue
current=queue[1]
current
query = readLines(paste("http://cognitiveatlas.org/api/v-alpha/relationships_by_concept/",current,sep=""),warn=FALSE);
query
CONID
image = "TASK07_CON35"
setwd("/home/vanessa/Documents/Work/BRAINMETA/IMAGE_COMPARISON/experiment3_unrelated/permutations")
pi = parse_single_input(read.csv(paste(iter,"_pearson_svi.tsv",sep=""),sep="\t",row.names=1))
pi
head(pi)
input
res = c()
sub = input[which(input$thresh==thresh),]
head(sub)
sub2 = sub1[which(sub1$queryimage==image),]
sub1 = sub[which(sub$direction==direction),]
sub2 = sub1[which(sub1$queryimage==image),]
sub2
sub2 = sub2[with(sub2, order(-score)), ]
if (sub2$comparisonimage[1] == image) {
acc = 1
} else {
acc = 0
}
acc
res = c()
for (thresh in thresholds){
sub = input[which(input$thresh==thresh),]
for (direction in directions){
sub1 = sub[which(sub$direction==direction),]
# For each query image, calculate accuracy
sub2 = sub1[which(sub1$queryimage==image),]
sub2 = sub2[with(sub2, order(-score)), ]
if (sub2$comparisonimage[1] == image) {
acc = 1
} else {
acc = 0
}
res = rbind(res,cbind(acc,thresh,direction))
}
}
head(res)
res = as.data.frame(res)
res$acc = as.numeric(as.character(res$acc))
res$thresh = as.numeric(as.character(res$thresh))
res$strategy = label
res
direction
calculate_single_accuracy = function(input,image,thresholds,directions,label) {
res = c()
for (thresh in thresholds){
sub = input[which(input$thresh==thresh),]
for (direction in directions){
sub1 = sub[which(sub$direction==direction),]
# For each query image, calculate accuracy
sub2 = sub1[which(sub1$queryimage==image),]
sub2 = sub2[with(sub2, order(-score)), ]
if (sub2$comparisonimage[1] == image) {
acc = 1
} else {
acc = 0
}
res = rbind(res,cbind(acc,thresh,direction))
}
}
res = as.data.frame(res)
res$acc = as.numeric(as.character(res$acc))
res$thresh = as.numeric(as.character(res$thresh))
res$strategy = label
return(res)
}
thresholds = unique(pi$thresh)
piacc = calculate_single_accuracy(pi,image,thresh,direction,"svi.pearson")
pdacc = calculate_single_accuracy(pd,image,thresh,direction,"cca.pearson")
pd = parse_single_input(read.csv(paste(iter,"_pearson_cca.tsv",sep=""),sep="\t",row.names=1))
si = parse_single_input(read.csv(paste(iter,"_spearman_svi.tsv",sep=""),sep="\t",row.names=1))
sd = parse_single_input(read.csv(paste(iter,"_spearman_cca.tsv",sep=""),sep="\t",row.names=1))
pi = parse_single_input(read.csv(paste(iter,"_pearson_svi.tsv",sep=""),sep="\t",row.names=1))
piacc = calculate_single_accuracy(pi,image,thresh,direction,"svi.pearson")
pdacc = calculate_single_accuracy(pd,image,thresh,direction,"cca.pearson")
siacc = calculate_single_accuracy(si,image,thresh,direction,"svi.spearman")
sdacc = calculate_single_accuracy(sd,image,thresh,direction,"cca.spearman")
allacc = rbind(piacc,pdacc,siacc,sdacc)
allacc
tableone
pi = parse_single_input(read.csv(paste(iter,"_pearson_svi.tsv",sep=""),sep="\t",row.names=1))
pd = parse_single_input(read.csv(paste(iter,"_pearson_cca.tsv",sep=""),sep="\t",row.names=1))
si = parse_single_input(read.csv(paste(iter,"_spearman_svi.tsv",sep=""),sep="\t",row.names=1))
sd = parse_single_input(read.csv(paste(iter,"_spearman_cca.tsv",sep=""),sep="\t",row.names=1))
pi
pi[pi$queryimage==image,]
pi = pi[pi$queryimage==image,]
pd = pd[pd$queryimage==image,]
si = si[si$queryimage==image,]
sd = sd[sd$queryimage==image,]
head(pi)
input=pi
thresh
thresh=1.0
sub = input[which(input$thresh==thresh),]
dim(sub)
sub = input[which(input$thresh==thresh),]
sub1 = sub[which(sub$direction==direction),]
head(sub1)
dim(sub1)
sub2 = sub1[which(sub1$queryimage==image),]
sub2 = sub2[with(sub2, order(-score)), ]
sub2
dim(sub)
dim(sub2)
if (sub2$comparisonimage[1] == image) {
acc = 1
} else {
acc = 0
}
acc
res = c()
for (thresh in thresholds){
sub = input[which(input$thresh==thresh),]
for (direction in directions){
sub1 = sub[which(sub$direction==direction),]
# For each query image, calculate accuracy
sub2 = sub1[which(sub1$queryimage==image),]
sub2 = sub2[with(sub2, order(-score)), ]
if (sub2$comparisonimage[1] == image) {
acc = 1
} else {
acc = 0
}
res = rbind(res,cbind(acc,thresh,direction))
}
}
res = as.data.frame(res)
res$acc = as.numeric(as.character(res$acc))
res$thresh = as.numeric(as.character(res$thresh))
res$strategy = label
res
label
# Calculate accuracy for single contrast
calculate_single_accuracy = function(input,image,thresholds,directions,label,iter) {
res = c()
for (thresh in thresholds){
sub = input[which(input$thresh==thresh),]
for (direction in directions){
sub1 = sub[which(sub$direction==direction),]
# For each query image, calculate accuracy
sub2 = sub1[which(sub1$queryimage==image),]
sub2 = sub2[with(sub2, order(-score)), ]
if (sub2$comparisonimage[1] == image) {
acc = 1
} else {
acc = 0
}
res = rbind(res,cbind(acc,thresh,direction,iter))
}
}
res = as.data.frame(res)
res$acc = as.numeric(as.character(res$acc))
res$thresh = as.numeric(as.character(res$thresh))
res$strategy = label
return(res)
}
piacc = calculate_single_accuracy(pi,image,thresh,direction,"svi.pearson",iter)
pdacc = calculate_single_accuracy(pd,image,thresh,direction,"cca.pearson",iter)
siacc = calculate_single_accuracy(si,image,thresh,direction,"svi.spearman",iter)
sdacc = calculate_single_accuracy(sd,image,thresh,direction,"cca.spearman",iter)
piacc
pdacc = calculate_single_accuracy(pd,image,thresh,direction,"cca.pearson",iter)
siacc = calculate_single_accuracy(si,image,thresh,direction,"svi.spearman",iter)
sdacc = calculate_single_accuracy(sd,image,thresh,direction,"cca.spearman",iter)
allacc = rbind(piacc,pdacc,siacc,sdacc)
allacc
image = "TASK07_CON35"
cat("THRESHOLD:",thresh,"DIRECTION",direction,"\n")
res = c()
for (iter in iters){
# Read in each of the input files
cat(iter,"\n")
pi = parse_single_input(read.csv(paste(iter,"_pearson_svi.tsv",sep=""),sep="\t",row.names=1))
pd = parse_single_input(read.csv(paste(iter,"_pearson_cca.tsv",sep=""),sep="\t",row.names=1))
si = parse_single_input(read.csv(paste(iter,"_spearman_svi.tsv",sep=""),sep="\t",row.names=1))
sd = parse_single_input(read.csv(paste(iter,"_spearman_cca.tsv",sep=""),sep="\t",row.names=1))
# We only care about one image
pi = pi[pi$queryimage==image,]
pd = pd[pd$queryimage==image,]
si = si[si$queryimage==image,]
sd = sd[sd$queryimage==image,]
piacc = calculate_single_accuracy(pi,image,thresh,direction,"svi.pearson",iter)
pdacc = calculate_single_accuracy(pd,image,thresh,direction,"cca.pearson",iter)
siacc = calculate_single_accuracy(si,image,thresh,direction,"svi.spearman",iter)
sdacc = calculate_single_accuracy(sd,image,thresh,direction,"cca.spearman",iter)
allacc = rbind(piacc,pdacc,siacc,sdacc)
res = rbind(res,allacc)
}
head(res)
df = ddply(res,c("direction","thresh","strategy"), summarise, accuracy_mean=mean(acc),up=get_ci(acc,"upper"),down=get_ci(acc,"lower"))
res$acc
res$thresh
res$direction
res$direction = as.character(res$direction)
df = ddply(res,c("direction","thresh","strategy"), summarise, accuracy_mean=mean(acc),up=get_ci(acc,"upper"),down=get_ci(acc,"lower"))
res$iter
res$iter = as.numeric(res$iter)
df = ddply(res,c("direction","thresh","strategy"), summarise, accuracy_mean=mean(acc),up=get_ci(acc,"upper"),down=get_ci(acc,"lower"))
head(df)
df
df$accuracy_mean
unique(res$acc)
thresh
image
paste("accuracy_df_",image,".Rda",sep="")
directions = c("pos","posneg")
thresholds=1:13
allres = c()
for (thresh in thresholds){
for (direction in directions){
cat("THRESHOLD:",thresh,"DIRECTION",direction,"\n")
res = c()
for (iter in iters){
# Read in each of the input files
cat(iter,"\n")
pi = parse_single_input(read.csv(paste(iter,"_pearson_svi.tsv",sep=""),sep="\t",row.names=1))
pd = parse_single_input(read.csv(paste(iter,"_pearson_cca.tsv",sep=""),sep="\t",row.names=1))
si = parse_single_input(read.csv(paste(iter,"_spearman_svi.tsv",sep=""),sep="\t",row.names=1))
sd = parse_single_input(read.csv(paste(iter,"_spearman_cca.tsv",sep=""),sep="\t",row.names=1))
# We only care about one image
pi = pi[pi$queryimage==image,]
pd = pd[pd$queryimage==image,]
si = si[si$queryimage==image,]
sd = sd[sd$queryimage==image,]
piacc = calculate_single_accuracy(pi,image,thresh,direction,"svi.pearson",iter)
pdacc = calculate_single_accuracy(pd,image,thresh,direction,"cca.pearson",iter)
siacc = calculate_single_accuracy(si,image,thresh,direction,"svi.spearman",iter)
sdacc = calculate_single_accuracy(sd,image,thresh,direction,"cca.spearman",iter)
allacc = rbind(piacc,pdacc,siacc,sdacc)
res = rbind(res,allacc)
}
# Calculate the mean across thresholds and directions
res$direction = as.character(res$direction)
res$iter = as.numeric(res$iter)
df = ddply(res,c("direction","thresh","strategy"), summarise, accuracy_mean=mean(acc),up=get_ci(acc,"upper"),down=get_ci(acc,"lower"))
allres = rbind(allres,df)
save(allres,file=paste("accuracy_df_",image,".Rda",sep=""))
}
}
directions = c("pos","posneg")
thresholds=0:13
allres = c()
for (thresh in thresholds){
for (direction in directions){
cat("THRESHOLD:",thresh,"DIRECTION",direction,"\n")
res = c()
for (iter in iters){
# Read in each of the input files
cat(iter,"\n")
pi = parse_single_input(read.csv(paste(iter,"_pearson_svi.tsv",sep=""),sep="\t",row.names=1))
pd = parse_single_input(read.csv(paste(iter,"_pearson_cca.tsv",sep=""),sep="\t",row.names=1))
si = parse_single_input(read.csv(paste(iter,"_spearman_svi.tsv",sep=""),sep="\t",row.names=1))
sd = parse_single_input(read.csv(paste(iter,"_spearman_cca.tsv",sep=""),sep="\t",row.names=1))
# We only care about one image
pi = pi[pi$queryimage==image,]
pd = pd[pd$queryimage==image,]
si = si[si$queryimage==image,]
sd = sd[sd$queryimage==image,]
piacc = calculate_single_accuracy(pi,image,thresh,direction,"svi.pearson",iter)
pdacc = calculate_single_accuracy(pd,image,thresh,direction,"cca.pearson",iter)
siacc = calculate_single_accuracy(si,image,thresh,direction,"svi.spearman",iter)
sdacc = calculate_single_accuracy(sd,image,thresh,direction,"cca.spearman",iter)
allacc = rbind(piacc,pdacc,siacc,sdacc)
res = rbind(res,allacc)
}
# Calculate the mean across thresholds and directions
res$direction = as.character(res$direction)
res$iter = as.numeric(res$iter)
df = ddply(res,c("direction","thresh","strategy"), summarise, accuracy_mean=mean(acc),up=get_ci(acc,"upper"),down=get_ci(acc,"lower"))
allres = rbind(allres,df)
save(allres,file=paste("accuracy_df_",image,".Rda",sep=""))
}
}
head(allres)
dim(allres)
save(allres,file=paste("accuracy_df_",image,".Rda",sep=""))
direction="posneg"
ggplot(allres[allres$direction==direction,], aes(x=thresh,y=accuracy_mean,ymax=up,ymin=down, fill=strategy,colour=strategy)) +
geom_line(size=1.5) +
geom_ribbon(alpha=0.15,linetype=0) +
xlab("Threshold +/-") +
ylab("Accuracy") +
ylim(0,1) +
scale_x_continuous(breaks = round(seq(0, 13, by = 1.0),1))
ggsave(paste(savedir,"/ml_accuracy",image,direction,"_withCI.png",sep=""))
direction="pos"
ggplot(allres[allres$direction==direction,], aes(x=thresh,y=accuracy_mean,ymax=up,ymin=down, fill=strategy,colour=strategy)) +
geom_line(size=1.5) +
geom_ribbon(alpha=0.15,linetype=0) +
xlab("Threshold +/-") +
ylab("Accuracy") +
ylim(0,1) +
scale_x_continuous(breaks = round(seq(0, 13, by = 1.0),1))
image
getwd()
savedir
direction="pos"
ggplot(allres[allres$direction==direction,], aes(x=thresh,y=accuracy_mean,ymax=up,ymin=down, fill=strategy,colour=strategy)) +
geom_line(size=1.5) +
geom_ribbon(alpha=0.15,linetype=0) +
xlab("Threshold +") +
ylab("Accuracy") +
ylim(0,1) +
scale_x_continuous(breaks = round(seq(0, 13, by = 1.0),1))
direction="posneg"
ggplot(allres[allres$direction==direction,], aes(x=thresh,y=accuracy_mean,ymax=up,ymin=down, fill=strategy,colour=strategy)) +
geom_line(size=1.5) +
geom_ribbon(alpha=0.15,linetype=0) +
xlab("Threshold +/-") +
ylab("Accuracy") +
ylim(0,1) +
scale_x_continuous(breaks = round(seq(0, 13, by = 1.0),1))
ggsave(paste(savedir,"/ml_accuracy",image,direction,"_withCI.png",sep=""))
getOpton("X11fonts")
getOption("X11fonts")
direction="pos"
direction="pos"
ggplot(allres[allres$direction==direction,], aes(x=thresh,y=accuracy_mean,ymax=up,ymin=down, fill=strategy,colour=strategy)) +
geom_line(size=1.5) +
geom_ribbon(alpha=0.15,linetype=0) +
xlab("Threshold +") +
ylab("Accuracy") +
ylim(0,1) +
scale_x_continuous(breaks = round(seq(0, 13, by = 1.0),1))
image
write.table(allres,file=paste(datadir,"/ml_accuracy",image,".tsv",sep=""),sep="\t")
datadir
